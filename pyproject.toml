[project]
name = "gentropy"
# !! version is managed by semantic_release
version = "2.1.0"
description = "Open Targets python framework for post-GWAS analysis"
authors = [{ name = "Open Targets core team", email = "data@opentargets.org" }]
license = "Apache-2.0"
readme = "README.md"
requires-python = ">=3.10, <3.13"
dependencies = [
  "pyspark (>=3.5.0, <3.6)",
  "hail (>=0.2.133, <0.3.0)",
  "scipy (>=1.11.4, <1.16.0)",
  "hydra-core (>=1.3.2, <1.4.0)",
  "pyliftover (>=0.4.1, <0.5.0)",
  "numpy (>=1.26.4, <2.3.0)",
  "wandb (>=0.19.4, <0.20.0)",
  "omegaconf (>=2.3.0, <2.4.0)",
  "typing-extensions (>=4.12.2, <4.13.0)",
  "scikit-learn (>=1.6.1, <1.7.0)",
  "pandas[gcp,parquet] (>=2.2.3, <2.3.0)",
  "skops (>=0.11.0, <0.12.0)",
  "shap (>=0.46, <0.47)",
  "matplotlib (>=3.10.0, <3.11.0)",
  "google-cloud-secret-manager (>=2.12.6, <2.24.0)",
  "google-cloud-storage (>=2.14.0, <3.2.0)",
]
classifiers = [
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
[project.urls]
Source = "https://github.com/opentargets/gentropy"
"Bug Tracker" = "http://github.com/opentargets/issues"
Funding = "https://www.opentargets.org"
Documentation = "https://opentargets.github.io/gentropy/"

[project.scripts]
gentropy = "gentropy.cli:main"

[dependency-groups]
docs = [
  "mkdocs >=1.5.3, <1.6.0",
  "mkdocstrings-python >=1.12.2, <1.13.0",
  "mkdocs-material",
  "mkdocs-section-index >=0.3.4, <0.4.0",
  "mkdocs-git-revision-date-localized-plugin >=1.2.2, <1.4.0",
  "mkdocs-autolinks-plugin >=0.7.1, <0.8.0",
  "mkdocs-awesome-pages-plugin >=2.9.2, <3.0.0",
  "mkdocs-exclude >=1.0.2, <1.1.0",
  "mkdocs-git-committers-plugin-2 >=2.2.3, <2.5.0",
  "lxml >=5.1.0, <5.4.0",
  "pymdown-extensions >=10.7, <10.13",
]
test = [
  "pytest-cov >=4.1,<7.0",
  "pytest-sugar >=0.9.5,<1.1.0",
  "dbldatagen >=0.3.1,<0.5.0",
  "pyparsing >=3.1.1, <3.3.0",
  "pytest >=7.4.4,<9.0.0",
  "pytest-xdist >=3.5.0, <3.7.0",
]

dev = [
  "ipython >=8.19.0, <8.31.0",
  "ipykernel >=6.28.0, <6.30.0",
  "pydoclint >=0.3.8,<0.6.0",
  "prettier >=0.0.7, <0.1.0",
  "deptry >=0.22.0, <0.23.0",
  "yamllint >=1.33.0, <1.36.0",
  "pre-commit >=4.0.0, <4.1.0",
  "mypy >=1.13, <1.14",
  "pep8-naming >=0.14.1, <0.15.0",
  "interrogate >=1.7.0, <1.8.0",
  "isort >=5.13.2, <5.14.0",
  "darglint >=1.8.1, <1.9.0",
  "ruff >=0.8.1, <0.9.0",
]
[tool.semantic_release]
logging_use_named_masks = true
build_command = "pip install uv && uv build"
assets = []
version_toml = ["pyproject.toml:project.version"]
upload_to_pypi = false
upload_to_release = true

[tool.hatch.build.targets.wheel]
packages = ["src/gentropy"]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false

[tool.semantic_release.branches.dev]
match = "dev"
prerelease = true
prerelease_token = "rc"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.semantic-release.changelog.default_templates]
changelog_file = "CHANGELOG.md"

[tool.semantic-release.changelog]
exclude_commit_patterns = ["chore\\(release\\):"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.deptry]
extend_exclude = ["src/conftest.py", "src/utils"]

[tool.deptry.per_rule_ignores]
DEP001 = ["gentropy"]
DEP003 = ["gentropy"]

[tool.interrogate]
fail-under = 95
color = true
exclude = ["dist"]

[tool.pytest.ini_options]
addopts = "-n auto --doctest-modules --cov=src/ --cov-report=xml --cache-clear"
pythonpath = ["."]
testpaths = ["tests/gentropy", "src/gentropy"]
markers = ["step_test"]

# Semi-strict mode for mypy
[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = [
  "google.cloud",
  "yaml",
  "hail",
  "pyliftover",
  "dbldatagen",
  "scipy",
  "scipy.stats",
  "chardet",
  "omegaconf",
  "xgboost",
  "sklearn",
]
ignore_missing_imports = true


[tool.ruff.lint]
select = [
  "B002",    # Python does not support the unary prefix increment
  "B007",    # Loop control variable {name} not used within loop body
  "B014",    # Exception handler with duplicate exception
  "B023",    # Function definition does not bind loop variable {name}
  "B026",    # Star-arg unpacking after a keyword argument is strongly discouraged
  "B904",    # Checks for raise statements in exception handlers that lack a from clause
  "C",       # complexity
  "COM818",  # Trailing comma on bare tuple prohibited
  "D",       # docstrings
  "DTZ003",  # Use datetime.now(tz=) instead of datetime.utcnow()
  "DTZ004",  # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
  "E",       # pycodestyle
  "F",       # pyflakes/autoflake
  "G",       # flake8-logging-format
  "I",       # isort
  "ICN001",  # import concentions; {name} should be imported as {asname}
  "ISC001",  # Implicitly concatenated string literals on one line
  "N804",    # First argument of a class method should be named cls
  "N805",    # First argument of a method should be named self
  "N815",    # Variable {name} in class scope should not be mixedCase
  "PGH004",  # Use specific rule codes when using noqa
  "PLC0414", # Useless import alias. Import alias does not rename original package.
  "PLC",     # pylint
  "PLE",     # pylint
  "PLR",     # pylint
  "PLW",     # pylint
  "Q000",    # Double quotes found but single quotes preferred
  "RUF006",  # Store a reference to the return value of asyncio.create_task
  "S102",    # Use of exec detected
  "S103",    # bad-file-permissions
  "S108",    # hardcoded-temp-file
  "S306",    # suspicious-mktemp-usage
  "S307",    # suspicious-eval-usage
  "S313",    # suspicious-xmlc-element-tree-usage
  "S314",    # suspicious-xml-element-tree-usage
  "S315",    # suspicious-xml-expat-reader-usage
  "S316",    # suspicious-xml-expat-builder-usage
  "S317",    # suspicious-xml-sax-usage
  "S318",    # suspicious-xml-mini-dom-usage
  "S319",    # suspicious-xml-pull-dom-usage
  "S320",    # suspicious-xmle-tree-usage
  "S601",    # paramiko-call
  "S602",    # subprocess-popen-with-shell-equals-true
  "S604",    # call-with-shell-equals-true
  "S608",    # hardcoded-sql-expression
  "S609",    # unix-command-wildcard-injection
  "SIM105",  # Use contextlib.suppress({exception}) instead of try-except-pass
  "SIM117",  # Merge with-statements that use the same scope
  "SIM118",  # Use {key} in {dict} instead of {key} in {dict}.keys()
  "SIM201",  # Use {left} != {right} instead of not {left} == {right}
  "SIM208",  # Use {expr} instead of not (not {expr})
  "SIM212",  # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
  "SIM300",  # Yoda conditions. Use 'age == 42' instead of '42 == age'.
  "SIM401",  # Use get from dict with default instead of an if block
  "T100",    # Trace found: {name} used
  "T20",     # flake8-print
  "TID251",  # Banned imports
  "TRY004",  # Prefer TypeError exception for invalid type
  "TRY302",  # Remove exception handler; error is immediately re-raised
  "UP",      # pyupgrade
  "W",       # pycodestyle
]

ignore = [
  "E501", # line too long
  "E731", # do not assign a lambda expression, use a def

  # Ignore ignored, as the rule is now back in preview/nursery, which cannot
  # be ignored anymore without warnings.
  # https://github.com/astral-sh/ruff/issues/7491
  # "PLC1901", # Lots of false positives

  # False positives https://github.com/astral-sh/ruff/issues/5386
  "PLC0208", # Use a sequence type instead of a `set` when iterating over values
  "PLR0911", # Too many return statements ({returns} > {max_returns})
  "PLR0912", # Too many branches ({branches} > {max_branches})
  "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
  "PLR0915", # Too many statements ({statements} > {max_statements})
  "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
  "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
  "UP006",   # keep type annotation style as is
  "UP007",   # keep type annotation style as is
  # Ignored due to performance: https://github.com/charliermarsh/ruff/issues/2923
  "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`

]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"path/to/file.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pydoclint]
style = 'google'
exclude = '\.git|\.venv|__init__.py|tests|docs'
require-return-section-when-returning-nothing = false
check-return-types = true
allow-init-docstring = true
arg-type-hints-in-docstring = true
skip-checking-short-docstrings = false
check-class-attributes = false
